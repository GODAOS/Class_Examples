○ 상속(Inheritance)
	- 상위 클래스로부터 하위 클래스가 물려 받는다.
	- 상태 정보 : 멤버 변수/필드, 행위 정보 : 메소드
	- 상속받은 하위 클래스에서 상태 정보, 행위 정보를 추가/수정(재정의, Override) 가능
	- extends 키워드를 활용한다 : public class A extends B ▶ A(자식) → B(부모)	
	- 자바는 단일 상속만 허용한다. 이러한 문제점을 해결하기 위해 인터페이스(Interface)가 등장
	
○ 다형성(Polymorphism)
	- 하위 클래스마다 공통적인 행위 정보가 존재 → 추상 메소드 구현 ▶ 추상 클래스
	- 상속의 전제 조건에서 반드시 메소드의 재정의(Override)가 필수
	- 하위 클래스의 동작 방식을 몰라도 하위 클래스를 동작 시킬 수 있다 : UpCasting
	- 하위 클래스의 동작이 수정되더라도 사용하는 쪽에서는 영향을 미치지 않는다.
	- 상위 클래스가 동일한 메세지로 하위 클래스를 서로 다르게 동작시키는 객체지향 개념
		예) 부모가 자식에게 꽃을 사와라(동일한 지시/명령)
			# 큰 아들 : 인터넷 주문을 통해 꽃배달을 이용하여 꽃을 사온다.
			# 딸 : 남자친구에게 부탁하여 꽃을 사온다.
			# 막내 : 직접 꽃집에 가서 꽃을 사온다.
	- 유지 보수, 확장성이 좋아진다.
	
○ Interface(인터페이스)
	- JAVA는 단일 상속만 허용 → 다중 상속의 이점을 활용할 필요성 ▶ Interface 구현
	- 모든 메소드는 추상 메소드로만 구성된다.
	- 상속 받은 하위 클래스는 반드시 재정의(Override)가 필수
	- Interface의 상속은 implements 키워드 사용